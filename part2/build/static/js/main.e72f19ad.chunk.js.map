{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","i","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"kNAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBAAuB,iBAE3B,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,K,gBCRpCK,EAAU,kCA4BD,EA1BA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAwB5B,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCZ5BK,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAIP,yBAAKd,UAAU,SACZc,ICFDC,EAAS,WAOb,OACE,yBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKR,6BACA,uGA4FSC,EAtFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,0BAJjC,mBAITO,EAJS,KAIKC,EAJL,KAOjBC,qBAAU,WACRC,IAEGzB,MAAK,SAAA0B,GACNT,EAASS,QAEV,IAEJ,IAuCMC,EAAcP,EAChBJ,EACAA,EAAMY,QAAO,SAAAtC,GAAI,OAAIA,EAAKG,aAE5B,OACE,6BACE,qCACC,kBAAC,EAAD,CAAce,QAASc,IACxB,6BACA,4BAAQ1B,QAAS,kBAAMyB,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGhC,4BACGO,EAAYE,KAAI,SAACvC,EAAMwC,GAAP,OACb,kBAAC,EAAD,CACIC,IAAKD,EACLxC,KAAMA,EACNC,iBAAkB,kBAtCP,SAAAc,GACzB,IAAMf,EAAO0B,EAAMgB,MAAK,SAAAC,GAAC,OAAIA,EAAE5B,KAAOA,KAChC6B,EAAW,2BAAQ5C,GAAR,IAAcG,WAAYH,EAAKG,YAEhDgC,EACUpB,EAAI6B,GACXlC,MAAK,SAAAmC,GACNlB,EAASD,EAAMa,KAAI,SAAAvC,GAAI,OAAIA,EAAKe,KAAOA,EAAKf,EAAO6C,SAElDC,OAAM,SAAAC,GACPd,EAAgB,SAAD,OACNjC,EAAKK,QADC,sCAGf2C,YAAW,WACTf,EAAgB,QACf,KACHN,EAASD,EAAMY,QAAO,SAAAK,GAAC,OAAIA,EAAE5B,KAAOA,SAsBAkC,CAAmBjD,EAAKe,WAI1D,0BAAMmC,SA7DI,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBhD,QAASuB,EACT0B,MAAM,IAAIC,MAAOC,cACjBrD,UAAWsD,KAAKC,SAAW,IAE7BvB,EACUkB,GACP3C,MAAK,SAAAmC,GACNlB,EAASD,EAAMiC,OAAOd,IACpBhB,EAAW,SAmDR,2BAAO+B,MAAOhC,EACbiC,SAhDe,SAACV,GACxBtB,EAAWsB,EAAMW,OAAOF,UAgDjB,4BAAQG,KAAK,UAAb,SAEJ,kBAAC,EAAD,Q,MClGLC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.e72f19ad.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li className='note'>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note\n","import axios from 'axios'\nconst baseUrl = 'http://localhost:3001/api/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\n// const getAll = () => {\n//   const request = axios.get(baseUrl)\n//   const nonExisting = {\n//     id: 10000,\n//     content: 'This note is not saved to server',\n//     date: '2019-05-30T17:30:31.098Z',\n//     important: true,\n//   }\n//   return request.then(response => response.data.concat(nonExisting))\n// }\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }\n","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nexport default Notification\n","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport axios from 'axios'\nimport noteService from './services/notes'\nimport Notification from './components/Notification'\n\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n    </div>\n  )\n}\n\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('some error happened...')\n\n // useEffect takes two parameters - the handler (a function) and the second one speicifying when it should be rendered - empty array means only the frist time the component is rendered\n useEffect(() => {\n   noteService\n     .getAll()\n     .then(initialNotes => {\n     setNotes(initialNotes)\n     })\n }, [])\n\nconst addNote = (event) => {\n  event.preventDefault()\n  const noteObject = {\n    content: newNote,\n    date: new Date().toISOString(),\n    important: Math.random() < 0.5\n  }\n  noteService\n    .create(noteObject)\n    .then(returnedNote => {\n    setNotes(notes.concat(returnedNote))\n      setNewNote('')\n    })\n}\n\nconst handleNoteChange = (event) => {\n  setNewNote(event.target.value)\n}\n\nconst toggleImportanceOf = id => {\n  const note = notes.find(n => n.id === id)\n  const changedNote = { ...note, important: !note.important }\n\n  noteService\n    .update(id, changedNote)\n    .then(returnedNote => {\n    setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n    })\n    .catch(error => {\n    setErrorMessage(\n    `Note '${note.content}' was already removed from server`\n    )\n    setTimeout(() => {\n      setErrorMessage(null)\n    }, 5000)\n    setNotes(notes.filter(n => n.id !== id))\n    })\n}\n\nconst notesToShow = showAll\n  ? notes\n  : notes.filter(note => note.important)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n       <Notification message={errorMessage} />\n      <div>\n      <button onClick={() => setShowAll(!showAll)}>\n        show {showAll ? 'important' : 'all' }\n      </button>\n      </div>\n      <ul>\n        {notesToShow.map((note, i) =>\n            <Note\n                key={i}\n                note={note}\n                toggleImportance={() => toggleImportanceOf(note.id)}\n            />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n         <input value={newNote}\n          onChange={handleNoteChange}/>\n         <button type=\"submit\">save</button>\n      </form>\n     <Footer />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport axios from 'axios'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}