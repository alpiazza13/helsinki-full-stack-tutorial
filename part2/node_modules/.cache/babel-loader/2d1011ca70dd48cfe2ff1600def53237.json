{"ast":null,"code":"var _jsxFileName = \"/Users/alexpiazza/Desktop/full_stack/part2/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Note from './components/Note';\nimport axios from 'axios';\nimport noteService from './services/notes';\nimport Notification from './services/Notification';\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState('some error happened...'); // useEffect takes two parameters - the handler (a function) and the second one speicifying when it should be rendered - empty array means only the frist time the component is rendered\n\n  useEffect(() => {\n    noteService.getAll().then(initialNotes => {\n      setNotes(initialNotes);\n    });\n  }, []);\n\n  const addNote = event => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5\n    };\n    noteService.create(noteObject).then(returnedNote => {\n      setNotes(notes.concat(returnedNote));\n      setNewNote('');\n    });\n  };\n\n  const handleNoteChange = event => {\n    setNewNote(event.target.value);\n  };\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id);\n    const changedNote = { ...note,\n      important: !note.important\n    };\n    noteService.update(id, changedNote).then(returnedNote => {\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote));\n    }).catch(error => {\n      alert(`the note '${note.content}' was already deleted from server`);\n      setNotes(notes.filter(n => n.id !== id));\n    });\n  };\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, \"Notes\"), /*#__PURE__*/React.createElement(Notification, {\n    message: errorMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 8\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setShowAll(!showAll),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, \"show \", showAll ? 'important' : 'all')), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, notesToShow.map((note, i) => /*#__PURE__*/React.createElement(Note, {\n    key: i,\n    note: note,\n    toggleImportance: () => toggleImportanceOf(note.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: addNote,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: newNote,\n    onChange: handleNoteChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 10\n    }\n  }, \"save\")));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/alexpiazza/Desktop/full_stack/part2/src/App.js"],"names":["React","useState","useEffect","Note","axios","noteService","Notification","App","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","getAll","then","initialNotes","addNote","event","preventDefault","noteObject","content","date","Date","toISOString","important","Math","random","create","returnedNote","concat","handleNoteChange","target","value","toggleImportanceOf","id","note","find","n","changedNote","update","map","catch","error","alert","filter","notesToShow","i"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport axios from 'axios'\nimport noteService from './services/notes'\nimport Notification from './services/Notification'\n\n\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('some error happened...')\n\n // useEffect takes two parameters - the handler (a function) and the second one speicifying when it should be rendered - empty array means only the frist time the component is rendered\n useEffect(() => {\n   noteService\n     .getAll()\n     .then(initialNotes => {\n     setNotes(initialNotes)\n     })\n }, [])\n\nconst addNote = (event) => {\n  event.preventDefault()\n  const noteObject = {\n    content: newNote,\n    date: new Date().toISOString(),\n    important: Math.random() < 0.5\n  }\n  noteService\n    .create(noteObject)\n    .then(returnedNote => {\n    setNotes(notes.concat(returnedNote))\n      setNewNote('')\n    })\n}\n\nconst handleNoteChange = (event) => {\n  setNewNote(event.target.value)\n}\n\nconst toggleImportanceOf = id => {\n  const note = notes.find(n => n.id === id)\n  const changedNote = { ...note, important: !note.important }\n\n  noteService\n    .update(id, changedNote)\n    .then(returnedNote => {\n    setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n    })\n    .catch(error => {\n    alert(`the note '${note.content}' was already deleted from server`)\n    setNotes(notes.filter(n => n.id !== id))\n    })\n}\n\nconst notesToShow = showAll\n  ? notes\n  : notes.filter(note => note.important)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n       <Notification message={errorMessage} />\n      <div>\n      <button onClick={() => setShowAll(!showAll)}>\n        show {showAll ? 'important' : 'all' }\n      </button>\n      </div>\n      <ul>\n        {notesToShow.map((note, i) =>\n            <Note\n                key={i}\n                note={note}\n                toggleImportance={() => toggleImportanceOf(note.id)}\n            />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n         <input value={newNote}\n          onChange={handleNoteChange}/>\n         <button type=\"submit\">save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}